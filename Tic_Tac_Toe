{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPU+AdoJDbeW/7DfHFMkfAJ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Jeeya142004/Jeeya142004/blob/main/Tic_Tac_Toe\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "uoOA0vg-6znO"
      },
      "outputs": [],
      "source": [
        "def ConstBoard(board):\n",
        "  print(\"Current State of the Board: \\n\");    #-1=x, 1=O, blanks=0\n",
        "  for i in range(0,9):\n",
        "    if((i>0) and (i%3)==0):\n",
        "      print('\\n');\n",
        "    if(board[i]==0):\n",
        "      print(\"_\", end=\" \");\n",
        "    if(board[i]==-1):\n",
        "      print(\"X\", end=\" \");\n",
        "    if(board[i]==1):\n",
        "      print(\"O\", end=\" \");\n",
        "  print(\"\\n\");\n",
        "\n",
        "def user1turn(board):\n",
        "  pos= int(input(\"Enter X's position from [1,2,...9]: \"));\n",
        "  if (board[pos-1]!=0):\n",
        "    print(\"||WRONG MOVE||\"); \n",
        "    return False;\n",
        "  board[pos-1]=-1;\n",
        "\n",
        "def user2turn(board):\n",
        "  pos= int(input(\"Enter O's position from [1,2,...9]: \"));\n",
        "  if (board[pos-1]!=0):\n",
        "    print(\"||WRONG MOVE||\");\n",
        "    return False;\n",
        "  board[pos-1]=1;\n",
        "\n",
        "def minmax(board, player):\n",
        "  x=analyzeboard(board);\n",
        "  if(x!=0):\n",
        "    return (x*player);\n",
        "  pos=-1;\n",
        "  value=-2;\n",
        "  for i in range(0,9):\n",
        "    if board[i]==0:\n",
        "      board[i]=player;\n",
        "      score=-minmax(board, player*-1);\n",
        "      board[i]=0;\n",
        "      if score>value:\n",
        "        value=score;\n",
        "        pos=i;\n",
        "  if(pos==-1):\n",
        "    return 0;\n",
        "  return value;\n",
        "\n",
        "def CompTurn(board):\n",
        "  pos=-1;\n",
        "  value=-2;\n",
        "  for i in range(0,9):\n",
        "    if board[i]==0:\n",
        "      board[i]=1;\n",
        "      score=-minmax(board, -1);\n",
        "      board[i]=0;\n",
        "      if score>value:\n",
        "        value=score;\n",
        "        pos=i;\n",
        "  board[pos]=1;\n",
        "\n",
        "def analyzeboard(board):\n",
        "  cb=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]]\n",
        "  for i in range(0,8):\n",
        "    if (board[cb[i][0]]!=0 and board[cb[i][0]]==board[cb[i][1]] and board[cb[i][0]]==board[cb[i][2]]):\n",
        "      return board[cb[i][0]];\n",
        "  return 0;\n",
        "\n",
        "def main():\n",
        "  choice= int(input('''Enter 1 for single player\n",
        "      2 for multiplayer: '''))\n",
        "  board= [0,0,0,0,0,0,0,0,0]\n",
        "  if choice==1:\n",
        "    print(\"Computer: O vs You: X\");\n",
        "    player= int(input(\"Enter to play 1st or 2nd: \"));\n",
        "    for i in range(0,9):\n",
        "      if(analyzeboard(board)!=0):\n",
        "        break;\n",
        "      if((i+player)%2==0):\n",
        "        CompTurn(board);\n",
        "      else:\n",
        "        ConstBoard(board);\n",
        "        user1turn(board);\n",
        "  else:\n",
        "    for i in range(0,9):\n",
        "      if(analyzeboard(board)!=0):\n",
        "        break;\n",
        "      if(i%2==0):\n",
        "        ConstBoard(board);\n",
        "        user1turn(board);\n",
        "      else:\n",
        "        ConstBoard(board);\n",
        "        user2turn(board);\n",
        "\n",
        "  x= analyzeboard(board);\n",
        "  if(x==0):\n",
        "    ConstBoard(board);\n",
        "    print(\"DRAW!!\");\n",
        "  if(x==-1):\n",
        "    ConstBoard(board);\n",
        "    print(\"Player X Wins!!| O Looses!!\");\n",
        "  if(x==1):\n",
        "    ConstBoard(board);\n",
        "    print(\"Player O Wins!!| X Looses!!\");\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "1\n",
        "main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z8ra8c-aGUe1",
        "outputId": "31d3ec9d-21e7-447f-a36f-b232bafe05a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Computer: O vs You: X\n",
            "Current State of the Board: \n",
            "\n",
            "_ _ _ \n",
            "\n",
            "_ _ _ \n",
            "\n",
            "_ _ _ \n",
            "\n",
            "Current State of the Board: \n",
            "\n",
            "O _ _ \n",
            "\n",
            "_ X _ \n",
            "\n",
            "_ _ _ \n",
            "\n",
            "Current State of the Board: \n",
            "\n",
            "O _ O \n",
            "\n",
            "_ X _ \n",
            "\n",
            "_ _ X \n",
            "\n",
            "Current State of the Board: \n",
            "\n",
            "O X O \n",
            "\n",
            "_ X _ \n",
            "\n",
            "_ O X \n",
            "\n",
            "||WRONG MOVE||\n",
            "Current State of the Board: \n",
            "\n",
            "O X O \n",
            "\n",
            "O X _ \n",
            "\n",
            "_ O X \n",
            "\n"
          ]
        }
      ]
    }
  ]
}